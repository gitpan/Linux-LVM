.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LVM 3"
.TH LVM 3 "2003-04-04" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Linux::LVM \- Perl extension for accessing LVM data structures.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Linux::LVM;
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 2
\&  The live data used in the examples is included in the DESCRIPTION area
\&  for your convenience and reference.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&  get_volume_group_list()       This routine will return an array that
\&                                contains the names of the volume groups.
.Ve
.PP
.Vb 2
\&  @vgs = get_volume_group_list(); print "@vgs \en"; 
\&  Would yield the following: vg00
.Ve
.PP
.Vb 3
\&  get_volume_group_information($)       This routine will return all of
\&                                        the volume group information about
\&                                        the specified volume group.
.Ve
.PP
.Vb 29
\&  %vg = get_volume_group_information("vg00");
\&  foreach(sort keys %vg) {
\&     print "$_ = $vg{$_}\en";
\&  }
\&  Would yield the following:
\&     access = read/write
\&     act_pv = 2
\&     alloc_pe = 3840
\&     alloc_pe_size = 15
\&     alloc_pe_size_unit = GB
\&     cur_lv = 3
\&     cur_pv = 2
\&     free_pe = 864
\&     free_pe_size = 3.38
\&     free_pe_size_unit = GB
\&     max_lv = 256
\&     max_lv_size = 255.99
\&     max_lv_size_unit = GB
\&     max_pv = 256
\&     open_lv = 0
\&     pe_size = 4
\&     pe_size_unit = MB
\&     status = available/resizable
\&     total_pe = 4704
\&     uuid = BBq8si-NyRR-9ZNW-3J5e-DoRO-RBHK-ckrszi
\&     vg_number = 0
\&     vg_size = 18.38
\&     vg_size_unit = GB
\&     vgname = vg00
.Ve
.PP
.Vb 3
\&  get_logical_volume_information($)     This routine will return all of the
\&                                        logical volume information associated
\&                                        with the specified volume group.
.Ve
.PP
.Vb 20
\&  %lv = get_logical_volume_information("vg00");
\&  foreach $lvname (sort keys %lv) {
\&      foreach(sort keys %{$lv{$lvname}}) {
\&          print "$_ = $lv{$lvname}->{$_}\en"; 
\&      }
\&      print "\en"; 
\&  }
\&  Would yield the following results:
\&  alloc_le = 1024
\&  allocation = next free
\&  cur_le = 1024
\&  device = 58:0
\&  lv_number = 1
\&  lv_size = 4
\&  lv_size_unit = GB
\&  name = /dev/vg00/lvol1
\&  open_lv = 0
\&  read_ahead = 1024
\&  status = available
\&  write_access = read/write
.Ve
.PP
.Vb 12
\&  alloc_le = 1280
\&  allocation = next free
\&  cur_le = 1280
\&  device = 58:1
\&  lv_number = 2
\&  lv_size = 5
\&  lv_size_unit = GB
\&  name = /dev/vg00/lvol2
\&  open_lv = 0
\&  read_ahead = 1024
\&  status = available
\&  write_access = read/write
.Ve
.PP
.Vb 12
\&  alloc_le = 1536
\&  allocation = next free
\&  cur_le = 1536
\&  device = 58:2
\&  lv_number = 3
\&  lv_size = 6
\&  lv_size_unit = GB
\&  name = /dev/vg00/lvol3
\&  open_lv = 0
\&  read_ahead = 1024
\&  status = available
\&  write_access = read/write
.Ve
.PP
.Vb 4
\&  get_physical_volume_information("vg00")       This routine will return all
\&                                                of the information about the
\&                                                physical volumes assigned to
\&                                                the specified volume group.
.Ve
.PP
.Vb 13
\&  %pv = get_physical_volume_information("vg00");
\&  foreach $pvname (sort keys %pv) {
\&      foreach(sort keys %{$pv{$pvname}}) {
\&          print "$_ = $pv{$pvname}->{$_}\en";
\&      }
\&      print "\en";
\&  }
\&  Would yield the following results:
\&  device = /dev/hda3
\&  free_pe = 0
\&  pv_number = 1
\&  status = available / allocatable
\&  total_pe = 2160
.Ve
.PP
.Vb 5
\&  device = /dev/hda4
\&  free_pe = 864
\&  pv_number = 2
\&  status = available / allocatable
\&  total_pe = 2544
.Ve
.PP
.Vb 19
\&  Command Output Used In The Above Examples: /sbin/vgdisplay -v
\&  --- Volume group ---
\&  VG Name               vg00
\&  VG Access             read/write
\&  VG Status             available/resizable
\&  VG #                  0
\&  MAX LV                256
\&  Cur LV                3
\&  Open LV               0
\&  MAX LV Size           255.99 GB
\&  Max PV                256
\&  Cur PV                2
\&  Act PV                2
\&  VG Size               18.38 GB
\&  PE Size               4 MB
\&  Total PE              4704
\&  Alloc PE / Size       3840 / 15 GB
\&  Free  PE / Size       864 / 3.38 GB
\&  VG UUID               BBq8si-NyRR-9ZNW-3J5e-DoRO-RBHK-ckrszi
.Ve
.PP
.Vb 13
\&  --- Logical volume ---
\&  LV Name                /dev/vg00/lvol1
\&  VG Name                vg00
\&  LV Write Access        read/write
\&  LV Status              available
\&  LV #                   1
\&  # open                 0
\&  LV Size                4 GB
\&  Current LE             1024
\&  Allocated LE           1024
\&  Allocation             next free
\&  Read ahead sectors     1024
\&  Block device           58:0
.Ve
.PP
.Vb 13
\&  --- Logical volume ---
\&  LV Name                /dev/vg00/lvol2
\&  VG Name                vg00
\&  LV Write Access        read/write
\&  LV Status              available
\&  LV #                   2
\&  # open                 0
\&  LV Size                5 GB
\&  Current LE             1280
\&  Allocated LE           1280
\&  Allocation             next free
\&  Read ahead sectors     1024
\&  Block device           58:1
.Ve
.PP
.Vb 13
\&  --- Logical volume ---
\&  LV Name                /dev/vg00/lvol3
\&  VG Name                vg00
\&  LV Write Access        read/write
\&  LV Status              available
\&  LV #                   3
\&  # open                 0
\&  LV Size                6 GB
\&  Current LE             1536
\&  Allocated LE           1536
\&  Allocation             next free
\&  Read ahead sectors     1024
\&  Block device           58:2
.Ve
.PP
.Vb 4
\&  --- Physical volumes ---
\&  PV Name (#)           /dev/hda3 (1)
\&  PV Status             available / allocatable
\&  Total PE / Free PE    2160 / 0
.Ve
.PP
.Vb 3
\&  PV Name (#)           /dev/hda4 (2)
\&  PV Status             available / allocatable
\&  Total PE / Free PE    2544 / 864
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
vgdisplay(1M)
lvdisplay(1M)
pvdisplay(1M)
.SH "AUTHOR"
.IX Header "AUTHOR"
Chad Kerner, <chadkerner@yahoo.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003 by Chad Kerner
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
